# Generated by Django 4.2.3 on 2023-07-29 21:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coach_name', models.CharField(max_length=100, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('movement', models.IntegerField(default=0)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('armor', models.IntegerField(default=0)),
                ('passing', models.IntegerField(blank=True, default=0, null=True)),
                ('cost', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('race_type', models.CharField(blank=True, choices=[('AMA', 'Amazon'), ('CDW', 'Chaos Dwarf'), ('CHA', 'Chaos Chosen'), ('DWF', 'Dwarf'), ('ELV', 'Elven Union'), ('GOB', 'Goblin'), ('HAF', 'Halfling'), ('HUM', 'Human'), ('LIZ', 'Lizardmen'), ('NEC', 'Necromantic Horror'), ('NOR', 'Norse'), ('OGR', 'Ogre'), ('ORC', 'Orc'), ('SKA', 'Skaven'), ('UND', 'Undead'), ('WOD', 'Wood Elf'), ('BLA', 'Black Orc'), ('IMP', 'Imperial Nobility'), ('SNO', 'Snotling'), ('OWA', 'Old World Alliance'), ('DAR', 'Dark Elf'), ('HIG', 'High Elf'), ('NUR', 'Nurgle'), ('KHO', 'Khorne')], max_length=3, unique=True)),
                ('reroll_cost', models.IntegerField(default=0)),
                ('has_apothecary', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=100, null=True, unique=True)),
                ('treasury', models.IntegerField(default=1000000)),
                ('team_re_roll', models.IntegerField(default=0)),
                ('fan_factor', models.IntegerField(default=1)),
                ('assistant_coaches', models.IntegerField(default=0)),
                ('cheerleaders', models.IntegerField(default=0)),
                ('apothecary', models.BooleanField(default=False)),
                ('ctv', models.PositiveIntegerField(default=0)),
                ('coach', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='team', to='bbm_app.coach')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bbm_app.race')),
            ],
        ),
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('skills', models.ManyToManyField(related_name='categories', to='bbm_app.skill')),
            ],
        ),
        migrations.CreateModel(
            name='RacePositionLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_count', models.IntegerField()),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bbm_app.position')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bbm_app.race')),
            ],
            options={
                'unique_together': {('race', 'position')},
            },
        ),
        migrations.AddField(
            model_name='race',
            name='positions',
            field=models.ManyToManyField(through='bbm_app.RacePositionLimit', to='bbm_app.position'),
        ),
        migrations.AddField(
            model_name='position',
            name='primary_skill_categories',
            field=models.ManyToManyField(related_name='primary_positions', to='bbm_app.skillcategory'),
        ),
        migrations.AddField(
            model_name='position',
            name='secondary_skill_categories',
            field=models.ManyToManyField(blank=True, related_name='secondary_positions', to='bbm_app.skillcategory'),
        ),
        migrations.AddField(
            model_name='position',
            name='starting_skills',
            field=models.ManyToManyField(blank=True, to='bbm_app.skill'),
        ),
        migrations.AddField(
            model_name='position',
            name='traits',
            field=models.ManyToManyField(blank=True, to='bbm_app.trait'),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('level', models.PositiveIntegerField(choices=[(1, 'Rookie'), (2, 'Experienced'), (3, 'Veteran'), (4, 'Star'), (5, 'Super Star'), (6, 'Legend')], default=1)),
                ('spp', models.PositiveIntegerField(default=0)),
                ('value', models.PositiveIntegerField()),
                ('movement', models.IntegerField(default=0)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('armor', models.IntegerField(default=0)),
                ('passing', models.IntegerField(default=0)),
                ('is_journeyman', models.BooleanField(default=False)),
                ('number', models.PositiveIntegerField(null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('injured', 'Injured'), ('dead', 'Dead')], default='active', max_length=20)),
                ('niggling_injuries', models.IntegerField(default=0)),
                ('former_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='former_players', to='bbm_app.team')),
                ('graveyard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dead_players', to='bbm_app.team')),
                ('player_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='players', to='bbm_app.team')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bbm_app.position')),
                ('skills', models.ManyToManyField(related_name='current_skills', to='bbm_app.skill')),
                ('traits', models.ManyToManyField(to='bbm_app.trait')),
            ],
            options={
                'unique_together': {('player_team', 'number')},
            },
        ),
        migrations.CreateModel(
            name='Graveyard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('players', models.ManyToManyField(related_name='dead', to='bbm_app.player')),
            ],
        ),
    ]
